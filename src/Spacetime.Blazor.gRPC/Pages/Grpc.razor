@page "/grpc/{serviceId:int?}/{methodId:int?}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Spacetime.Blazor.gRPC.Components
@using Spacetime.Blazor.gRPC.Store
@using Spacetime.Core.gRPC
@using Spacetime.Core.gRPC.Interfaces

@inject IDialogService DialogService
@inject IProtobufService ProtobufService
@inject IDispatcher Dispatcher
@inject IState<GrpcState> State

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="padding: 0">
    <MudPaper Height="100%" Width="100%" Square="true" Elevation="0" Class="mud-theme-primary">
        <MudPaper Class="mud-height-full" Square="true" Elevation="0" Style="overflow:hidden; position:relative;">
            <MudDrawerContainer Class="mud-height-full ">
                <MudDrawer @bind-Open="@open" Width="300px" Class="border-r border-solid" Elevation="0" Variant="@DrawerVariant.Persistent">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">gRPC Services</MudText>
                    </MudDrawerHeader>
                    <div class="px-2 pb-2 flex justify-between items-baseline">
                        <MudTextField Label="Search" Variant="Variant.Text" Dense="true" @bind-Value="Search"/>
                        <MudIconButton Icon="@Icons.Filled.AddCircleOutline" Color="Color.Primary" OnClick=@OpenAddProtobuf></MudIconButton>
                    </div>
                    <MudPaper>
                       @* <MudList Dense="true" Clickable="State.Value.Services.Any()">
                            @foreach (var svc in State.Value.Services)
                            {
                                <MudListItem InitiallyExpanded="false">
                                    <ChildContent>
                                        <MudMenu ActivationEvent="@MudBlazor.MouseEvent.RightClick"
                                             Dense="true">
                                            <ActivatorContent>
                                                @svc.Name
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem OnClick="() => RemoveService(svc.Id)">Remove Service</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    </ChildContent>
                                    <NestedList>
                                        @foreach (var method in svc.Methods)
                                        {
                                            <MudMenu ActivationEvent="@MudBlazor.MouseEvent.RightClick"
                                             Dense="true"
                                             PositionAtCursor="true">
                                                <ActivatorContent>
                                                    <MudListItem Dense="true" Class="py-0">
                                                        <MudNavLink Href="@($"/grpc/{svc.Id}/{method.Id}")">@method.Name</MudNavLink>
                                                    </MudListItem>
                                                </ActivatorContent>
                                                <ChildContent>
                                                    <MudMenuItem>Remove Method</MudMenuItem>
                                                </ChildContent>
                                            </MudMenu>
                                        }
                                    </NestedList>
                                </MudListItem>
                            }
                            
                            @if (!State.Value.Services.Any())
                            {
                                <MudListItem>
                                    <MudStack>
                                        <MudText Align="Align.Center" Typo="Typo.caption">No services found.</MudText>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OpenAddProtobuf">Add Service</MudButton>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>*@
                    </MudPaper>
                </MudDrawer>
                <div class="d-flex flex-column mud-height-full pl-4 pb-4">
                    <GrpcClient Service="@CurrentService" Method="@CurrentMethod" />
                </div>
            </MudDrawerContainer>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    [CascadingParameter]
    public MudTheme Theme { get; set; } = new();

    [Parameter]
    public int? ServiceId { get; set; }

    [Parameter]
    public int? MethodId { get; set; }

    public string Search { get; set; } = string.Empty;
    public GrpcServiceDefinition? CurrentService { get; set; }
    public GrpcMethodDefinition? CurrentMethod { get; set; }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchServicesAction());

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        CurrentService = ServiceId != null ? State.Value.Services?.FirstOrDefault(p => p.Id == ServiceId.Value) : State.Value.Services?.FirstOrDefault();
        CurrentMethod = MethodId != null ? CurrentService?.Methods.FirstOrDefault(p => p.Id == MethodId) : CurrentService?.Methods.FirstOrDefault();
    }

    public async Task OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AddProtoDialog>("Add gRPC Service", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Dispatcher.Dispatch(new FetchServicesAction());
        }
    }

    public void RemoveService(int id)
    {
        Dispatcher.Dispatch(new RemoveServiceAction {Id = id});
    }

    public void RemoveMethod(int id)
    {

    }
}
