@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IGrpcExplorer GrpcExplorer
@inject IDispatcher Dispatcher
@inject IState<GrpcState> State

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="URL"
                              Placeholder="URL"
                              Label="URL"
                              Variant="Variant.Outlined" />
                <div class="my-2">
                    <MudButton OnClick="ValidateGrpc"
                               Color="Color.Success"
                               Disabled="State.Value.IsSaving">
                        Get Service Metadata
                    </MudButton>
                    
                    @if (CanSave())
                    {
                        <MudButton OnClick="SaveProto"
                                   Disabled="@(!CanSave())"
                                   Color="Color.Primary">
                            Save Service
                        </MudButton>
                    }
                </div>
            </MudItem>
            <MudItem xs="6">
                @if (GrpcExploreResult != null)
                {
                    <!-- todo: pagination -->
                    <!-- todo: filtering -->
                    <!-- todo: sorting -->
                    <MudTable Items="FlattenedServiceMap" Hover="true" FixedHeader="true" Height="300px">
                        <HeaderContent>
                            <MudTh>Service</MudTh>
                            <MudTh>Method</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.ServiceName</MudTd>
                            <MudTd DataLabel="Value">@context.MethodName</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Typo="Typo.body2">To explore services and methods, add the URL of your service that supports gRPC reflection.</MudText>
                }
                @if (!string.IsNullOrWhiteSpace(Error))
                {
                    <MudAlert Severity="Severity.Error">@Error</MudAlert>
                }
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    void Submit() => MudDialog?.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog?.Cancel();

    public string? ProtoFile { get; set; }
    public string? ImportPath { get; set; }
    public string? URL { get; set; }
    public string Error { get; set; }
    public GrpcExploreResult? GrpcExploreResult { get; set; }
    private List<FlattenedService> FlattenedServiceMap { get; set; } = new List<FlattenedService>();

    private async Task ValidateGrpc()
    {
        FlattenedServiceMap.Clear();

        if (string.IsNullOrWhiteSpace(URL))
        {
            return;
        }

        try
        {
            GrpcExploreResult = await GrpcExplorer.Explore(URL);

            foreach (var svc in GrpcExploreResult.Services)
            {
                foreach (var method in svc.Methods)
                {
                    FlattenedServiceMap.Add(new FlattenedService {ServiceName = svc.Name, MethodName = method.Name});
                }
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private void SaveProto()
    {
        if (GrpcExploreResult == null || State.Value.IsSaving)
        {
            return;
        }

        Dispatcher.Dispatch(new SaveServicesAction { Services = GrpcExploreResult.Services });
    }

    private bool CanSave()
    {
        return !State.Value.IsSaving && GrpcExploreResult != null && GrpcExploreResult.Services.Count > 0;
    }

    private class FlattenedService
    {
        public string? ServiceName { get; set; }
        public string? MethodName { get; set; }
    }
}
