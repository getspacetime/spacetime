@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using System.Diagnostics
@inject IProtobufService ProtobufService
@inject IDialogService DialogService
@inject IGrpcExplorer GrpcExplorer
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher
@inject GrpcRequestService GrpcRequestService

<div class="grid grid-cols-2 gap-4 h-5/6 mx-2">
    <div class="flex flex-col gap-2 border rounded dark:border-gray-800 border-gray-100 shadow-md p-1 xs:col-span-2 sm:col-span-2 lg:col-span-1">
        <div class="flex gap-4">
            <div>
                <MudTextField Margin="Margin.Dense"
                              Label="Service"
                              Value="Service?.Name"
                              Placeholder="Service"
                              Variant="Variant.Outlined"
                              Class="my-4" />
                <MudTextField Margin="Margin.Dense"
                              Label="Method"
                              Value="Method?.Name"
                              Placeholder="Method"
                              Variant="Variant.Outlined" />
            </div>
            <div>
                <MudTextField Margin="Margin.Dense"
                              Class="my-4"
                              @bind-Value="Request.URL"
                              Label="Host"
                              Placeholder="http://localhost:8080"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Send" OnAdornmentClick="Execute" />
            </div>
        </div>
        <GrpcRequest @bind-Request="Request.Body" />
    </div>
    <div class="flex flex-col gap-2 border rounded dark:border-gray-800 border-gray-100 shadow-md p-1 sm:col-span-2 lg:col-span-1">
        <div class="flex flex-row my-4">
            <MudChip Color="Color.Default">@Request.Response?.Status</MudChip>
            <MudChip Color="Color.Default">@(Request.Response?.ElapsedMs)ms</MudChip>
        </div>
        <GrpcResponse @bind-Response="Request.Response"/>
    </div>
</div>

@code {
    /*
     * todos
     * 1. Look for local running docker containers and offer to use these for server reflection
     * 2. auto set url to be whatever the user used for server reflection
     */

    [Parameter]
    public GrpcServiceDefinition? Service { get; set; }

    [Parameter]
    public GrpcMethodDefinition? Method { get; set; }

    [Parameter]
    public Spacetime.Core.gRPC.GrpcRequest Request { get; set; }

    public void OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AddProtoDialog>("Add Protobuf", options);
    }

    private bool CanExecute()
    {
        var valid = true;

        if (Method == null || string.IsNullOrWhiteSpace(Method.Name))
        {
            Snackbar.Add("Select a gRPC Method", Severity.Error);
            valid = false;
        }

        return valid;
    }

    public async Task Execute()
    {
        if (!CanExecute())
        {
            return;
        }

        Request.MethodDefinitionId = Method.Id;
        Request.ServiceDefinitionId = Service.Id;

        Dispatcher.Dispatch(new SaveGrpcRequestAction { Request = Request });

        // todo: validate json
        Debug.Assert(Method != null);
        var grpcResponse = await GrpcExplorer.Invoke(Request.URL, Service.FullName, Method.Name, Request.Body);
        Request.Response = new SpacetimeResponse
            {
                ElapsedMs = grpcResponse.ElapsedMs,
                ResponseBody = grpcResponse.ResponseBody,
                Status = (SpacetimeStatus)grpcResponse.Status
            };

        Dispatcher.Dispatch(new SaveGrpcRequestAction { Request = Request });
    }
}
